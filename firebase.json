{
  "firestore": {
    "rules": "rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // User interests collection\n    match /user_interests/{userId} {\n      allow get: if request.auth != null;\n      allow create, update, delete: \n        if request.auth != null && request.auth.uid == userId;\n      allow list: if request.auth != null;\n    }\n\n    // User actions collection - updated for transaction-based match system\n    match /user_actions/{actionId} {\n      // Users can only create their own actions\n      allow create: \n        if request.auth != null &&\n        request.resource.data.actorUserId == request.auth.uid &&\n        request.resource.data.keys().hasAll(['actorUserId', 'targetUserId', 'actionType', 'timestamp']) &&\n        request.resource.data.actionType is string &&\n        (request.resource.data.actionType == 'like' || \n         request.resource.data.actionType == 'pass') &&\n        request.resource.data.matchStatus == false;\n      \n      // Users can read their own actions or actions targeting them\n      allow read: \n        if request.auth != null && \n        (request.auth.uid == resource.data.actorUserId || \n         request.auth.uid == resource.data.targetUserId);\n      \n      // Updated update rules to allow match status updates in transactions\n      allow update: \n        if request.auth != null &&\n        (\n          // Allow updates for match creation (either user involved can trigger)\n          (request.auth.uid == resource.data.actorUserId || \n           request.auth.uid == resource.data.targetUserId) &&\n          request.resource.data.keys().hasOnly(['matchStatus', 'matchedAt']) &&\n          resource.data.matchStatus == false &&\n          request.resource.data.matchStatus == true &&\n          request.resource.data.matchedAt is timestamp\n        );\n      \n      allow delete: if false;\n    }\n\n    // Matches collection - updated for transaction-based creation\n    match /matches/{matchId} {\n      // Allow creation through transactions by either participant\n      allow create: \n        if request.auth != null &&\n        request.resource.data.keys().hasAll(['userA', 'userB', 'timestamp', 'isActive']) &&\n        request.resource.data.isActive == true &&\n        request.resource.data.timestamp is timestamp &&\n        (request.auth.uid == request.resource.data.userA || \n         request.auth.uid == request.resource.data.userB) &&\n        // Ensure userA and userB are different\n        request.resource.data.userA != request.resource.data.userB &&\n        // Ensure userA comes before userB alphabetically (consistent ordering)\n        request.resource.data.userA < request.resource.data.userB;\n      \n      // Only participants can read the match\n      allow read: \n        if request.auth != null &&\n        (request.auth.uid == resource.data.userA ||\n         request.auth.uid == resource.data.userB);\n      \n      // Allow participants to update match status (e.g., deactivate)\n      allow update: \n        if request.auth != null &&\n        (request.auth.uid == resource.data.userA ||\n         request.auth.uid == resource.data.userB) &&\n        request.resource.data.keys().hasOnly(['isActive']) &&\n        request.resource.data.isActive is bool;\n      \n      // Prevent direct deletes\n      allow delete: if false;\n    }\n\n    // Users collection rules\n    match /users/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId;\n      allow read: if request.auth != null;\n    }\n    \n    // Chat rules\n    match /chats/{chatId} {\n      allow read, write: if request.auth != null && \n        request.auth.uid in resource.data.participants;\n      allow create: if request.auth != null && \n        request.auth.uid in request.resource.data.participants;\n    }\n    \n    // Messages rules\n    match /chats/{chatId}/messages/{messageId} {\n      allow read: if request.auth != null && \n        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;\n      allow create: if request.auth != null && \n        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&\n        request.auth.uid == request.resource.data.senderId;\n      allow delete: if request.auth != null && \n        request.auth.uid == resource.data.senderId;\n    }\n  }\n}",
    "indexes": "firestore.indexes.json"
  },
  "flutter": {
    "platforms": {
      "android": {
        "default": {
          "projectId": "sambandha-d9081",
          "appId": "1:897046943368:android:d854f67e8a345713a6713d",
          "fileOutput": "android/app/google-services.json"
        }
      },
      "dart": {
        "lib/firebase_options.dart": {
          "projectId": "sambandha-d9081",
          "configurations": {
            "android": "1:897046943368:android:d854f67e8a345713a6713d",
            "ios": "1:897046943368:ios:672af2f7f5dd01fca6713d",
            "macos": "1:897046943368:ios:672af2f7f5dd01fca6713d",
            "web": "1:897046943368:web:9cf592a92beeeb78a6713d",
            "windows": "1:897046943368:web:f951f0b77ec62c22a6713d"
          }
        }
      }
    }
  }
}